// recreated (in a clean-room way) definitions of the func_* entities of Doom3 and RoE
// (C) 2012 Daniel Gibson and Yamagi Burmeister, licensed under WTFPL v2

entityDef func_group {
	"editor_usage"	"Groups brushes, for convenience. They are converted to normal brushes when compiling the map"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0 0"
}


entityDef func_activator {
	"spawnclass"	"idActivator"
	"editor_usage"	"Invisible entity that activates triggers when touching them."
	"editor_usage1"	"If it's bound to a 'mover', the mover activates triggers on its way."
	"editor_usage2"	"When targeted by a trigger, the 'activator' becomes active/inactive."
	"editor_usage3"	"After touching the first trigger, the activator disables itself (this can be changed with the stay_on flag)"
	"editor_maxs"	"8 8 8"
	"editor_mins"	"-8 -8 -8"
	"editor_color"	"0 0.5 0.8"	

	"editor_bool start_off"	"if set, Activator is inactive at spawn"
	"editor_bool stay_on"	"if set, Activator isn't disable after touching first trigger"

	"start_off"	"0"
	"stay_on"	"0"
}

entityDef func_bobbing {
	"spawnclass"	"idBobber"
	"editor_usage"	"generic bobbing (moving up and down) entity, bobbing on Z axis by default"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"

	// FIXME: does func_bobbing really support sounds? c++ code suggests otherwise..
	"editor_snd snd_close"	"sound on close"
	"editor_snd snd_open"	"sound on open"
	"editor_snd snd_opened"	"wtf"
	
	"editor_float height"	"height of bob"
	"editor_float speed"	"duration of a sound (in seconds)"
	"editor_float phase"	"starting position in bobbing cycle, between 0.0 and 1.0"
	"editor_float damage"	"amount of damage for entities blocking the bobber"
	
	"editor_bool x_axis"	"if set, bob on X-axis"
	"editor_bool y_axis"	"if set, bob on Y-axis"
	
	"damage"	"2"
	"height"	"32.0"
	"phase"	"0.0"

	"speed"	"4.0"
	"x_axis"	"0"
	"y_axis"	"0"
}

entityDef func_cameraTarget {
	"spawnclass"	"idMover"
	"inherit"	"func_mover"
	"editor_usage"	"controls camera movements"
	// FIXME: better usage description
	"editor_maxs"	"8 8 8"
	"editor_mins"	"-8 -8 -8"
	"editor_color"	"0 0.5 0.8"
}

entityDef func_camera_anim {
	"spawnclass"	"idCameraAnim"
	"editor_usage"	"animation-controlled camera"
	"editor_maxs"	"16 16 32"
	"editor_mins"	"-16 -16 0"
	"editor_color"	"0 .5 .8"
			
	"editor_bool ignore_enemies"	"if not set and camera is active, all active monsters that are not marked as 'cinematic' are removed"
	"editor_float fov"	"camera's FOV"
	"editor_model model"	"the model"

	"editor_var joint"				// Verbunden mit angefügter Kamera (?)
	"editor_int cycle"	"How often the animation is played before targets are triggered (-1 for endlessly)"

	"fov"	"90"
}

entityDef func_door {
	"spawnclass"	"idDoor"
	"editor_usage"	"a normal door"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"
	"editor_mover"	"1"
	
	"editor_bool crusher"	"If blocked, the door does not open again (like modern elevator doors) but crushes whatever is in between (like in an old subway waggon)"
	"editor_bool gui_noninteractive" "If set, attached GUIs won't be interactive"
	"editor_bool no_touch"	"The door will not open, if the player touches it (or shoots it in MP). It only opens when triggered."
	"editor_int locked"	"Used with 'no_touch'. If set to 1, after triggering this door, it will behave like a dor with 'no_touch' *not* set (i.e. opens on touch). If set to 2, triggering the door the first time unlocks it, and afterwards it needs to be triggered again to open it."
	"editor_bool start_open"	"The door is open after spawn and is closed when triggered, i.e. it's behavior is inversed. NOTE: only makes sense for doors that do not open on touch or when shot (i.e. with 'health' set)"
	"editor_bool toggle"	"If set, the door only opens/closes when triggered"
	"editor_float wait"	"Time to wait (in seconds) before door clothes again. -1 means 'never close'"

 	"editor_snd snd_locked"	"sound when player tries to open locked door"
	"editor_snd snd_open"	"sound on open"
	"editor_snd snd_close"	"sound on close"
	"editor_snd snd_opened"	"sound looped while open"

	// FIXME: find out what movedir and angle really do..
	"editor_float movedir"	"-1 and -2 are special.. also, influences meaning of angle"	// Öffnungsrichtung. Wenn gesetzt, gibt 'angel' die Orientierung an.
	"editor_float angle"	"-1 and -2 are special.."		// Öffnungsrichtung.
	"editor_var buddy"		"name of a 'buddy-entity'. Its shaderparm 7 (SHADERPARM_MODE) will be set to 1 when door is unlocked. Can be used to change shaders when door is unlocked"
	"editor_float damage"	"damage inflicted on entities blocking the door"
	"editor_int health"		"door is opened if this amount of damage is inflicted (e.g. by shooting it)"
	"editor_float lip"		"lip remaining when opened"
	
	"editor_float speed"	"speed of movement"
	"editor_float time"		"How long opening/closing door should take (in seconds). Overwrites 'speed'. Helpful for doors consisting of multiple pieces of different size, that should be synchronized anyway."
	"editor_var triggerBlocked"	"Name of entity that will be triggered when door is blocked. Multiple entities can be triggered with 'triggerBlocked1', 'triggerBlocked2', ..."
	"editor_var triggerClosed"	"Name of entity that will be triggered when door is closed. Multiple entities can be triggered with 'triggerClosed1', 'triggerClosed2', ..."
	"editor_var triggerOpened"	"Name of entity that will be triggered when door is opened. Multiple entities can be triggered with 'triggerOpened1', 'triggerOpened2', ..."
	"editor_float triggersize"	"Size of the automatically created trigger to open the door on touch"
	
	"angle"	"0"
	"crusher"	"0"
	"damage"	"2"
	"health"	"0"
	"lip"	"8"
	"no_touch"	"0"
	"snd_close"	"default_door_close"
	"snd_open"	"default_door_open"
	"snd_opened"	""
	"snd_locked"	"default_door_locked"
	"snd_unlocked"	"default_door_unlocked" 
	"speed"	"100"
	"start_open"	"0"
	"triggersize"	"60"
	"wait"	"3"
}

entityDef func_mover {
	"spawnclass"	"idMover"
	"editor_usage"	"Movers are objects that can be controlled with scripts"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"
	
	"editor_snd snd_accel"	"sound-shader to play on acceleration. Played on channel SND_CHANNEL_BODY2"
	"editor_snd snd_move"	"sound-shader to play when movement starts. Played on channel SND_CHANNEL_BODY"
	"editor_snd snd_decel"	"sound-shader to play on deceleration. Played on channel SND_CHANNEL_BODY2"

	"editor_float accel_time"	"time (in sec, as float) until full acceleration"
	"editor_float decel_time"	"time (in sec, as float) deceleration until full stop"
	"editor_float damage"	"amount of damage for entities blocking the mover"

	"editor_var guiTarget"	"GUIs associated with this entity"
	// FIXME: editor_gui?
	"editor_int health"	"if not 0, amount of damage before targets are triggered"
	"editor_float move_speed"	"Speed in units/sec. Mutually exclusive with 'move_time'"
	"editor_float move_time"	"Duration (in sec) of moving sequence. Mutually exclusive with 'move_speed'"
	"editor_bool nopush"	"If set (not 0) blocking objects are not pushed"
	"editor_bool solidForTeam"	"if set, the entity is solid for entities it is bound to or that are bound to it"
	"editor_bool solid"	"if set, the entity is solid for other entities, otherwise it isn't"
}

entityDef func_mover_amodel {
	"inherit"	"func_mover"
	"editor_usage"	"A func_mover with a model (?! seems no different to func_mover at all..)"
	"editor_mins"	"?"
	"editor_maxs"	"?"
}

entityDef func_pendulum {
	"spawnclass"	"idPendulum"
	"editor_usage"	"If the model doesn't rotate, pendulums just swing back and forth. By specifying an 'angel' a rotation to another direction can be achieved."
	"editor_usage1"	"The pendulums speed will be calculated based on the strides length and the gravity"
	// FIXME: where does stride come from?
	
	"editor_mins"	"?"
	"editor_maxs"	"?"	
	"editor_color"	"0 0.5 0.8"
	

	// FIXME: does func_pendulum really support sounds? c++ code suggests otherwise..
	"editor_snd snd_close"	"sound on close"
	"editor_snd snd_open"	"sound on open"
	"editor_snd snd_opened"	"wtf"
	
	"editor_float damage"	"amount of damage for entities blocking the pendulum"	
	"editor_float freq"	"if set, frequency of pendulum (otherwise it's calculated by physics engine)"
	"editor_bool nopush"	"If set blocking objects are not pushed"
	"editor_float phase"	"starting position in oscillating cycle, between 0.0 and 1.0"
	"editor_var speed"	"how much the pendulum oscillates, in degrees"


	"damage"	"2"
	"phase"	"0"
	"nopush"	"0"

	"speed"	"30"
}

entityDef func_plat {
	"spawnclass"	"idPlat"
	"editor_usage"	"platform like in Quake"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"
	// FIXME: wtf does this mean and should it be applied to other movers as well?
	"editor_mover"	"1"

	"editor_snd snd_open"	"sound on open"
	"editor_snd snd_opened"	"sound when opened?"
	"editor_snd snd_close"	"sound on close"

	"editor_bool no_touch"	"If set, the platform isn't activated from a player touching it, but only from triggers"	
	"editor_var lip"	"overlap above rest position"
	"editor_var height"	"Maximal height of movement. By default, it's the models height."
	"editor_var speed"	"platform's speed"
	"editor_var damage"	"damage dealt to entities blocking the platform"

	"no_touch"	"0"
	"lip"	"8"
	"speed"	"200"
	"damage"	"2"
}

entityDef func_rotating {
	"spawnclass"	"idRotater"
	"editor_usage"	"Generic rotating entity, rotates around Z-axis by default. Targeting it toggles rotation (starts/stops it)"
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"

	"editor_float damage"	"amount of damage for entities blocking the rotater"
	"editor_float speed"	"rotation speed"	
	"editor_bool start_on"	"if set, rotates after being spawned, else it must be targeted first"
	"editor_bool x_axis"	"if set rotates around X-axis"
	"editor_bool y_axis"	"if set rotates around Y-axis"

	"damage"	"2"
	"speed"	"100"
	"start_on"	"1"
	"x_axis"	"0"
	"y_axis"	"0"
} 

entityDef func_splinemover {
	"spawnclass"	"idSplinePath"
	"editor_usage"	"saves a 'spline' path"
	// FIXME: wtf? for what? how?
	"editor_maxs"	"?"
	"editor_mins"	"?"
	"editor_color"	"0 0.5 0.8"
}

